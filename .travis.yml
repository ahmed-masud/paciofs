language: java

matrix:
  include:
    - os: linux
      dist: xenial
      jdk: openjdk8
      addons:
        apt:
          packages:
            - cmake
            - libfuse-dev
      env:
        - GO_DIST=linux
        - MULTICHAIN_VERSION=2.0-beta-1
        - MULTICHAIN_URL=https://www.multichain.com/download/multichain-${MULTICHAIN_VERSION}.tar.gz

    - os: osx
      osx_image: xcode10.1
      jdk: oraclejdk11
      addons:
        homebrew:
          packages:
            - clang-format
            - cmake
      env:
        - GO_DIST=darwin
        - MULTICHAIN_VERSION=2.0-dev-898f3fc
        - MULTICHAIN_URL=https://github.com/paciofs/multichain/releases/download/2.0-dev-20190131T090104/multichain-${MULTICHAIN_VERSION}-osx.tar.gz

    - os: linux
      dist: xenial
      services:
        - docker
      before_install: true
      install: true
      script:
        - docker-compose --log-level INFO --file ./paciofs-docker/docker-compose.yaml build

before_install:
  # install go
  - wget --output-document go.tar.gz --quiet https://dl.google.com/go/go1.11.5.${GO_DIST}-amd64.tar.gz
  - sudo tar --directory /usr/local --extract --file go.tar.gz
  - rm go.tar.gz
  - export GOPATH="${HOME}/go"
  - export GOBIN="${GOPATH}/bin"
  - export PATH="${PATH}:/usr/local/go/bin:${GOBIN}"

  # install dep
  - mkdir -p ${GOBIN}
  - export DEP_RELEASE_TAG="v0.5.0"
  - curl --silent https://raw.githubusercontent.com/golang/dep/master/install.sh | sh

  # install gRPC, protoc headers and libraries
  - export GRPC_VERSION="1.18.0"
  - export PROTOBUF_VERSION="3.6.1"
  - git clone --branch v$GRPC_VERSION https://github.com/grpc/grpc.git
  - export GRPC_HOME="$(pwd)/grpc"
  - cd ${GRPC_HOME}
  - git submodule update --init
  - cd ./third_party/protobuf && git checkout tags/v${PROTOBUF_VERSION} && cd ../../
  # build protobuf no matter what
  - export HAS_SYSTEM_PROTOBUF=false
  - make -j2
  - sudo make install
  - cd ./third_party/protobuf
  - sudo make install
  - cd ../../../
  - rm -rf ./grpc

  # install MultiChain
  - wget --output-document multichain.tar.gz --quiet ${MULTICHAIN_URL}
  - sudo tar --directory /usr/local --extract --file multichain.tar.gz
  - rm multichain.tar.gz
  - export MULTICHAIN_PATH="/usr/local/multichain-${MULTICHAIN_VERSION}"

  # install specific version of commons-exec
  - export COMMONS_EXEC_VERSION="42eb77c321f7dc17aaff45e45ac1179256517005"
  - wget --output-document commons-exec.zip --quiet https://github.com/apache/commons-exec/archive/${COMMONS_EXEC_VERSION}.zip
  - unzip commons-exec.zip
  - rm commons-exec.zip
  - cd commons-exec-${COMMONS_EXEC_VERSION}
  - mvn install --define maven.compiler.source=1.8 --define maven.compiler.target=1.8 --define skipTests=true --define maven.javadoc.skip=true --batch-mode
  - cd ..
  - rm -rf commons-exec-${COMMONS_EXEC_VERSION}

install:
  - mvn install --define skipTests=true --define maven.javadoc.skip=true --define protobuf.version=${PROTOBUF_VERSION} --define grpc.version=${GRPC_VERSION} --batch-mode --show-version

script:
  # run tests
  - mvn test --define protobuf.version=${PROTOBUF_VERSION} --define grpc.version=${GRPC_VERSION} --batch-mode

  # start and stop PacioFS
  - mvn --projects paciofs-server exec:java@run-server &
  - MVN_PID=$!
  - sleep 15s

  # simple query with default parameters
  - ${MULTICHAIN_PATH}/multichain-cli paciofs -datadir=/tmp/multichain-data-dir -rpconnect=localhost -rpcport=8332 getblockchaininfo; CLI_EXIT=$?

  # wait for everyting to shut down
  - kill ${MVN_PID}; wait ${MVN_PID}; MVN_EXIT=$?

  # JVM return code when sent SIGTERM
  - test "143" -eq "${MVN_EXIT}"

  # exit with the multichain-cli exit code
  - exit ${CLI_EXIT}
