<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>de.zib.paciofs</groupId>
        <artifactId>paciofs-parent</artifactId>
        <version>1.0.0-SNAPSHOT</version>
        <relativePath>..</relativePath>
    </parent>

    <artifactId>paciofs-server</artifactId>
    <version>1.0.0-SNAPSHOT</version>
    <name>paciofs-server</name>

    <packaging>jar</packaging>

    <properties>
        <akka.grpc.version>0.4.2</akka.grpc.version>
        <akka.http.version>10.1.5</akka.http.version>
        <akka.management.version>0.20.0</akka.management.version>
        <akka.version>2.5.19</akka.version>
        <bitcoin-rpc-client.version>1.1.0</bitcoin-rpc-client.version>
        <commons-cli.version>1.4</commons-cli.version>
        <!-- need unreleased version that fixes [EXEC-71] -->
        <!-- https://github.com/apache/commons-exec/commit/42eb77c321f7dc17aaff45e45ac1179256517005 -->
        <commons-exec.version>1.3.1-SNAPSHOT</commons-exec.version>
        <grpc.version>1.17.1</grpc.version>
        <jgit.version>5.2.1.201812262042-r</jgit.version>
        <logback-classic.version>1.2.3</logback-classic.version>
        <spotbugs.version>3.1.11</spotbugs.version>
        <spotbugs-maven-plugin.version>3.1.10</spotbugs-maven-plugin.version>
    </properties>

    <dependencies>
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>${logback-classic.version}</version>
        </dependency>
        <dependency>
            <groupId>com.lightbend.akka.discovery</groupId>
            <artifactId>akka-discovery-kubernetes-api_${scala.version}</artifactId>
            <version>${akka.management.version}</version>
        </dependency>
        <dependency>
            <groupId>com.lightbend.akka.grpc</groupId>
            <artifactId>akka-grpc-runtime_${scala.version}</artifactId>
            <version>${akka.grpc.version}</version>
        </dependency>
        <dependency>
            <groupId>com.lightbend.akka.management</groupId>
            <artifactId>akka-management-cluster-bootstrap_${scala.version}</artifactId>
            <version>${akka.management.version}</version>
        </dependency>
        <!-- explicitly depend on akka-management-cluster-http to have cluster health routes included in reference.conf -->
        <dependency>
            <groupId>com.lightbend.akka.management</groupId>
            <artifactId>akka-management-cluster-http_${scala.version}</artifactId>
            <version>${akka.management.version}</version>
        </dependency>
        <dependency>
            <groupId>com.typesafe.akka</groupId>
            <artifactId>akka-cluster_${scala.version}</artifactId>
            <version>${akka.version}</version>
        </dependency>
        <!-- explicitly depend on akka-http to have decode.max-size included in reference.conf -->
        <!-- see: https://discuss.lightbend.com/t/no-configuration-setting-found-for-key-decode-max-size/2738 -->
        <dependency>
            <groupId>com.typesafe.akka</groupId>
            <artifactId>akka-http_${scala.version}</artifactId>
            <version>${akka.http.version}</version>
        </dependency>
        <dependency>
            <groupId>com.typesafe.akka</groupId>
            <artifactId>akka-slf4j_${scala.version}</artifactId>
            <version>${akka.version}</version>
        </dependency>
        <dependency>
            <groupId>commons-cli</groupId>
            <artifactId>commons-cli</artifactId>
            <version>${commons-cli.version}</version>
        </dependency>
        <dependency>
            <groupId>io.grpc</groupId>
            <artifactId>grpc-stub</artifactId>
            <version>${grpc.version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-exec</artifactId>
            <version>${commons-exec.version}</version>
        </dependency>
        <dependency>
            <groupId>org.eclipse.jgit</groupId>
            <artifactId>org.eclipse.jgit</artifactId>
            <version>${jgit.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>wf.bitcoin</groupId>
            <artifactId>bitcoin-rpc-client</artifactId>
            <version>${bitcoin-rpc-client.version}</version>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <!-- must be specified before summarize-tests (see below) -->
            <plugin>
                <groupId>com.github.spotbugs</groupId>
                <artifactId>spotbugs-maven-plugin</artifactId>
                <version>${spotbugs-maven-plugin.version}</version>
                <dependencies>
                    <dependency>
                        <groupId>com.github.spotbugs</groupId>
                        <artifactId>spotbugs</artifactId>
                        <version>${spotbugs.version}</version>
                    </dependency>
                </dependencies>
                <executions>
                    <execution>
                        <id>spotbugs</id>
                        <phase>test</phase>
                        <goals>
                            <goal>spotbugs</goal>
                        </goals>
                        <configuration>
                            <skip>${spotbugs.skip}</skip>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-antrun-plugin</artifactId>
                <executions>
                    <!-- create target/generated-sources/grpc folders -->
                    <execution>
                        <id>make-target-folder</id>
                        <phase>initialize</phase>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <configuration>
                            <target>
                                <mkdir dir="${project.build.directory}/generated-sources/grpc"/>
                            </target>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>build-helper-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <id>add-grpc-sources</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>add-source</goal>
                        </goals>
                        <configuration>
                            <sources>
                                <source>${project.build.directory}/generated-sources/grpc</source>
                            </sources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- run after formatting the sources -->
            <!-- must be specified before summarize-tests (see below) -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-checkstyle-plugin</artifactId>
                <executions>
                    <execution>
                        <id>validate</id>
                        <phase>test</phase>
                        <goals>
                            <goal>checkstyle</goal>
                        </goals>
                        <configuration>
                            <configLocation>${project.basedir}/src/main/resources/checkstyle.xml</configLocation>
                            <encoding>UTF-8</encoding>
                            <linkXRef>false</linkXRef>
                            <sourceDirectories>
                                <!-- so the generated code does not get checked -->
                                <directory>${project.build.sourceDirectory}</directory>
                            </sourceDirectories>
                            <skip>${checkstyle.skip}</skip>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <id>format-sources</id>
                        <phase>process-sources</phase>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <workingDirectory>${project.basedir}</workingDirectory>
                            <executable>${project.basedir}/format-sources.sh</executable>
                            <skip>${format-sources.skip}</skip>
                        </configuration>
                    </execution>

                    <execution>
                        <id>generate-grpc</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <workingDirectory>${project.basedir}</workingDirectory>
                            <executable>${protobuf.protoc}</executable>
                            <arguments>
                                <argument>--proto_path=${project.basedir}/src/main/proto</argument>
                                <argument>--java_out=${project.build.directory}/generated-sources/grpc</argument>
                                <argument>io.proto</argument>
                            </arguments>
                        </configuration>
                    </execution>

                    <!-- invoke like this: mvn exec:java@run-server -->
                    <execution>
                        <id>run-server</id>
                        <phase>none</phase>
                        <goals>
                            <goal>java</goal>
                        </goals>
                        <configuration>
                            <mainClass>de.zib.paciofs.PacioFS</mainClass>
                            <systemProperties>
                                <!-- assume MultiChain has been built next to us -->
                                <systemProperty>
                                    <key>multichain.path</key>
                                    <value>${project.basedir}/../../multichain</value>
                                </systemProperty>
                            </systemProperties>
                            <arguments>
                                <!-- bootstrapping is useful in kubernetes only -->
                                <argument>--skip-bootstrap</argument>
                                <argument>--config</argument>
                                <argument>${project.basedir}/src/test/resources/debug.conf</argument>
                            </arguments>
                        </configuration>
                    </execution>

                    <!-- must be specified after checkstyle and spotbugs (see above) -->
                    <execution>
                        <id>summarize-checks</id>
                        <phase>test</phase>
                        <goals>
                            <goal>java</goal>
                        </goals>
                        <configuration>
                            <mainClass>de.zib.paciofs.test.CheckSummarizer</mainClass>
                            <classpathScope>test</classpathScope>
                            <arguments>
                                <argument>--dir</argument>
                                <argument>${project.build.directory}</argument>
                                <argument>--skip-checkstyle</argument>
                                <argument>${checkstyle.skip}</argument>
                                <argument>--skip-spotbugs</argument>
                                <argument>${spotbugs.skip}</argument>
                            </arguments>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-shade-plugin</artifactId>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>shade</goal>
                        </goals>
                        <configuration>
                            <shadedArtifactAttached>true</shadedArtifactAttached>
                            <shadedClassifierName>allinone</shadedClassifierName>
                            <artifactSet>
                                <includes>
                                    <include>*:*</include>
                                </includes>
                            </artifactSet>
                            <filters>
                                <filter>
                                    <artifact>${project.groupId}:${project.artifactId}</artifact>
                                    <excludes>
                                        <exclude>**/checkstyle.xml</exclude>
                                    </excludes>
                                </filter>
                            </filters>
                            <transformers>
                                <transformer
                                        implementation="org.apache.maven.plugins.shade.resource.AppendingTransformer">
                                    <resource>reference.conf</resource>
                                </transformer>
                                <transformer
                                        implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
                                    <manifestEntries>
                                        <Main-Class>de.zib.paciofs.PacioFS</Main-Class>
                                    </manifestEntries>
                                </transformer>
                            </transformers>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>
