akka {
  actor {
    # Either one of "local", "remote" or "cluster" or the
    # FQCN of the ActorRefProvider to be used; the below is the built-in default,
    # note that "remote" and "cluster" requires the akka-remote and akka-cluster
    # artifacts to be on the classpath.
    # provider = "local"
    provider = "cluster"
  }

  # Log level used by the configured loggers (see "loggers") as soon
  # as they have been started; before that, see "stdout-loglevel"
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  loglevel = "INFO"

  # Log level for the very basic logger activated during ActorSystem startup.
  # This logger prints the log messages to stdout (System.out).
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  stdout-loglevel = "INFO"

  remote {
    # Sets the log granularity level at which Akka logs remoting events. This setting
    # can take the values OFF, ERROR, WARNING, INFO, DEBUG, or ON. For compatibility
    # reasons the setting "on" will default to "debug" level. Please note that the effective
    # logging level is still determined by the global logging level of the actor system:
    # for example debug level remoting events will be only logged if the system
    # is running with debug level logging.
    # Failures to deserialize received messages also fall under this flag.
    # log-remote-lifecycle-events = on
    log-remote-lifecycle-events = "INFO"

    netty {
      tcp {
        # The hostname or ip clients should connect to.
        # InetAddress.getLocalHost.getHostAddress is used if empty
        hostname = ""

        # The default remote server port clients should connect to.
        # Default is 2552 (AKKA), use 0 if you want a random available port
        # This port needs to be unique for each actor system on the same machine.
        port = 30552
      }
    }
  }

  discovery {
    # The value can be an implementation config path name, such as "akka-dns",
    # which would attempt to resolve as `akka.discovery.akka-dns` which is expected
    # to contain a `class` setting. As fallback, the root `akka-dns` setting scope
    # would be used. If none of those contained a `class` setting, then the value is
    # assumed to be a class name, and an attempt is made to intanciate it.
    method = "kubernetes-api"

    kubernetes-api {
      # Picks up namespace from $NAMESPACE env var if set. Add the following to the container spec to avoid having to
      # hard code this
      # env:
      # - name: NAMESPACE
      #   valueFrom:
      #    fieldRef:
      #     fieldPath: metadata.namespace
      # Can be removed once https://github.com/akka/akka-management/issues/345 is implemented
      pod-namespace = ${?NAMESPACE}

      # Domain of the k8s cluster
      pod-domain = "cluster.local"

      # Selector value to query pod API with.
      # `%s` will be replaced with the configured effective name, which defaults to the actor system name
      pod-label-selector = "component=%s"

      # Only used in the case that Lookup.portName is not set. Bootstrap sets this from
      # akka.management.cluster.boostrap.contact-point-discovery.port-name
      pod-port-name = "management"
    }
  }

  management {
    http {
      # The hostname where the HTTP Server for Http Cluster Management will be started.
      # This defines the interface to use.
      # InetAddress.getLocalHost.getHostAddress is used not overriden or empty
      hostname = ""

      # The port where the HTTP Server for Http Cluster Management will be bound.
      # The value will need to be from 0 to 65535.
      port = 30558
    }

    cluster {
      bootstrap {
        contact-point-discovery {
          # Define this name to be looked up in service discovery for "neighboring" nodes
          # If undefined, the name will be extracted from the ActorSystem name
          # For the kubernetes API this value is substributed into the %s in pod-label-selector
          service-name = "paciofs"

          # The portName passed to discovery. This should be set to the name of the port for Akka Management
          # If set to "" None is passed
          port-name = "management"

          # Config path of discovery method to be used to locate the initial contact points.
          # It must be a fully qualified config path to the discovery's config section.
          #
          # By setting this to `akka.discovery` we ride on the configuration mechanisms that akka-discovery has,
          # and reuse what is configured for it. You can set it explicitly to something else here, if you want to
          # use a different discovery mechanism for the bootstrap than for the rest of the application.
          discovery-method = "akka.discovery.kubernetes-api"
        }
      }
    }
  }
}