/*
 * Copyright (c) 2019, Zuse Institute Berlin.
 *
 * Licensed under the New BSD License, see LICENSE file for details.
 *
 */

package de.zib.paciofs.test;

import com.google.protobuf.DescriptorProtos;
import com.google.protobuf.ExtensionRegistry;
import com.google.protobuf.compiler.PluginProtos;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;

public class SpotbugsProtocExcluder {
  private static final String OPTION_SPOTBUGS_EXCLUDE_FILE = "--spotbugs-exclude-file";

  public static void main(String[] args) throws Exception {
    File spotbugsExcludeFile = null;

    for (int i = 0; i < args.length; ++i) {
      switch (args[i]) {
        case OPTION_SPOTBUGS_EXCLUDE_FILE:
          spotbugsExcludeFile = new File(args[++i]);
          break;
        default:
          throw new IllegalArgumentException(args[i]);
      }
    }

    if (spotbugsExcludeFile == null) {
      throw new IllegalArgumentException("Missing " + OPTION_SPOTBUGS_EXCLUDE_FILE);
    }

    // parse the request passed in by protoc on stdin
    final ExtensionRegistry registry = ExtensionRegistry.newInstance();
    final PluginProtos.CodeGeneratorRequest request =
        PluginProtos.CodeGeneratorRequest.parseFrom(System.in, registry);
    final PluginProtos.CodeGeneratorResponse.Builder response =
        PluginProtos.CodeGeneratorResponse.newBuilder();

    // builder that holds the contents of the spotbugs exclude filter
    final StringBuilder spotbugsExcludeFileContent = new StringBuilder();

    if (!spotbugsExcludeFile.exists()) {
      // if the file does not exist, generate opening tag
      spotbugsExcludeFileContent
          .append("<!-- Generated by " + SpotbugsProtocExcluder.class.getName() + " -->")
          .append(System.lineSeparator());
      spotbugsExcludeFileContent.append("<FindBugsFilter>").append(System.lineSeparator());
    } else {
      // if it exists, read until before the closing tag so we can append
      final BufferedReader reader = new BufferedReader(new FileReader(spotbugsExcludeFile));
      String line;
      while (!"</FindBugsFilter>".equals(line = reader.readLine())) {
        spotbugsExcludeFileContent.append(line).append(System.lineSeparator());
      }
      reader.close();
    }

    // iterate over all proto files
    for (DescriptorProtos.FileDescriptorProto protoFile : request.getProtoFileList()) {
      // obtain the package name of the generated classes
      String packageString;
      final DescriptorProtos.FileOptions options = protoFile.getOptions();
      if (options != null) {
        packageString = options.getJavaPackage();
      } else {
        packageString = protoFile.getPackage();
      }

      if (packageString == null) {
        packageString = "";
      }

      // for each message
      for (DescriptorProtos.DescriptorProto message : protoFile.getMessageTypeList()) {
        // exclude the class
        spotbugsExcludeFileContent
            .append("  <Class name=\"" + packageString + "." + message.getName() + "\"/>")
            .append(System.lineSeparator());

        // and all static inner classes (regex)
        spotbugsExcludeFileContent
            .append("  <Class name=\"~^" + packageString.replace(".", "\\.") + "\\."
                + message.getName() + "\\$.*$\"/>")
            .append(System.lineSeparator());
      }

      // for each service do the same
      for (DescriptorProtos.ServiceDescriptorProto service : protoFile.getServiceList()) {
        spotbugsExcludeFileContent
            .append("  <Class name=\"" + packageString + "." + service.getName() + "\"/>")
            .append(System.lineSeparator());
        spotbugsExcludeFileContent
            .append("  <Class name=\"~^" + packageString.replace(".", "\\.") + "\\."
                + service.getName() + "\\$.*$\"/>")
            .append(System.lineSeparator());
      }
    }

    // finally emit the filter file to stdout
    spotbugsExcludeFileContent.append("</FindBugsFilter>").append(System.lineSeparator());
    response.addFile(PluginProtos.CodeGeneratorResponse.File.newBuilder()
                         .setName(spotbugsExcludeFile.getName())
                         .setContent(spotbugsExcludeFileContent.toString())
                         .build());
    response.build().writeTo(System.out);
  }
}
