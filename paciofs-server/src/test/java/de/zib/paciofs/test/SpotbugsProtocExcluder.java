/*
 * Copyright (c) 2019, Zuse Institute Berlin.
 *
 * Licensed under the New BSD License, see LICENSE file for details.
 *
 */

package de.zib.paciofs.test;

import com.google.protobuf.DescriptorProtos;
import com.google.protobuf.ExtensionRegistry;
import com.google.protobuf.compiler.PluginProtos;
import de.zib.paciofs.grpc.io.posix.IoPosix;

public class SpotbugsProtocExcluder {
  private static final String OPTION_SPOTBUGS_EXCLUDE_FILE = "--spotbugs-exclude-file";

  public static void main(String[] args) throws Exception {
    String spotbugsExcludeFilename = null;

    for (int i = 0; i < args.length; ++i) {
      switch (args[i]) {
        case OPTION_SPOTBUGS_EXCLUDE_FILE:
          spotbugsExcludeFilename = args[++i];
          break;
        default:
          throw new IllegalArgumentException(args[i]);
      }
    }

    if (spotbugsExcludeFilename == null) {
      throw new IllegalArgumentException("Missing " + OPTION_SPOTBUGS_EXCLUDE_FILE);
    }

    // parse the request passed in by protoc on stdin
    final ExtensionRegistry registry = ExtensionRegistry.newInstance();
    IoPosix.registerAllExtensions(registry);
    final PluginProtos.CodeGeneratorRequest request =
        PluginProtos.CodeGeneratorRequest.parseFrom(System.in, registry);
    final PluginProtos.CodeGeneratorResponse.Builder response =
        PluginProtos.CodeGeneratorResponse.newBuilder();

    // builder that holds the contents of the spotbugs exclude filter
    final StringBuilder spotbugsExcludeFileContent = new StringBuilder();
    spotbugsExcludeFileContent
        .append("<!-- Generated by " + SpotbugsProtocExcluder.class.getName() + " -->")
        .append(System.lineSeparator());
    spotbugsExcludeFileContent.append("<FindBugsFilter>").append(System.lineSeparator());

    // iterate over all proto files
    for (DescriptorProtos.FileDescriptorProto protoFile : request.getProtoFileList()) {
      // obtain the package name of the generated classes
      String packageString;
      final DescriptorProtos.FileOptions options = protoFile.getOptions();
      if (options != null) {
        packageString = options.getJavaPackage();
      } else {
        packageString = protoFile.getPackage();
      }

      if (packageString == null) {
        packageString = "";
      }

      // escape because we use it in a regex
      packageString = packageString.replace(".", "\\.");

      // add each message class and its subclasses to the filter
      for (DescriptorProtos.DescriptorProto message : protoFile.getMessageTypeList()) {
        spotbugsExcludeFileContent
            .append("  <Class name=\"~^" + packageString + "\\." + message.getName() + ".*$\"/>")
            .append(System.lineSeparator());
      }

      // add services, enums, ... like above
    }

    // finally emit the filter file to stdout
    spotbugsExcludeFileContent.append("</FindBugsFilter>").append(System.lineSeparator());
    final PluginProtos.CodeGeneratorResponse.File spotbugsExcludeFile =
        PluginProtos.CodeGeneratorResponse.File.newBuilder()
            .setName(spotbugsExcludeFilename)
            .setContent(spotbugsExcludeFileContent.toString())
            .build();
    response.addFile(spotbugsExcludeFile);
    response.build().writeTo(System.out);
  }
}
